---
- name: "Kibana container"
  tags:
    - container
    - kibana
  docker_container:
    name: "{{ kibana_container.name }}"
    image: "{{ kibana.image }}:{{ kibana.version }}"
    env:
      SERVER_NAME: "kibana-{{ instance }}.{{ domain }}"
      SERVER_HOST: "0.0.0.0"
      SERVER_PUBLICBASEURL: "https://kibana-{{ instance }}.{{ domain }}{{ kibana_container.entrypoint }}"
      SERVER_BASEPATH: "{{ kibana_container.entrypoint }}"
      SERVER_REWRITEBASEPATH: "true"
      ELASTICSEARCH_HOSTS: "http://{{ elasticsearch_container.name }}:{{ elasticsearch_container.port }}"
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: "{{ kibana.xpack_reporting_encryptionKey }}"
      XPACK_REPORTING_ROLES_ENABLED: "false"
      XPACK_SECURITY_ENCRYPTIONKEY: "{{ kibana.xpack_reporting_encryptionKey }}"
    log_driver: "{{ docker.logging.driver }}"
    log_options: "{{ docker.logging.options }}"
    network_mode: "{{ docker.network.mode }}"
    networks:
      - name: "{{ docker.network.name }}"
    restart_policy: "unless-stopped"
    networks_cli_compatible: yes
    ports:
      - "{{ kibana_container.port }}:{{ kibana_container.port }}"


- name: "Saved Searches"
  tags:
    - kibana
    - searches
  copy:
    src: "searches.ndjson"
    dest: "/home/ec2-user/searches.ndjson"
  register: searches


- name: "Kibana api operational"
  tags:
    - cfg
    - kibana
  uri:
    url: "http://localhost:{{ kibana_container.port }}/kibana/api/status"
  register: health
  retries: 10
  delay: 5
  until: health.status == 200
  failed_when:
    - health.json is undefined or health.json.status.core.savedObjects.level != "available"
  when: not ansible_check_mode


- name: "Load Saved Searches"
  tags:
    - kibana
    - searches
  command: 
    cmd: "curl http://localhost:{{ kibana_container.port }}/kibana/api/saved_objects/_import?overwrite=true -H 'kbn-xsrf:true' -sF file=@/home/ec2-user/searches.ndjson"
  when: searches.changed 
