---
- name: "Nginx volume"
  tags:
    - cfg
    - nginx
  file:
    state: "directory"
    path: "{{ item.path }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.owner | default('root') }}"
    mode: "0775"
  loop_control:
    label: "{{ item.path }}"
  loop:
    - { path: "{{ nginx.directory }}" }
    - { path: "{{ nginx.directory }}/bin" }
    - { path: "{{ nginx.directory }}/cache", owner: 101 }
    - { path: "{{ nginx.directory }}/{{ nginx_container.base_cfg_dir }}" }
    - { path: "{{ nginx.directory }}/{{ nginx_container.base_cfg_dir }}/location.d" }
    - { path: "{{ nginx.directory }}/html" }
    - { path: "{{ nginx.directory }}/error" }
    - { path: "{{ nginx.directory }}/geoip2" }
    - { path: "{{ nginx.directory }}/secure" }
    - { path: "{{ nginx.directory }}/ssl" }


- name: "{{ domain }} ssl"
  vars:
    bundle: "{{ ssl.cert }}\n{{ ssl.ca }}"
  tags:
    - cfg
    - ssl
  copy:
    dest: '{{ item.path }}'
    content: '{{ item.content }}'
    owner: root
    group: root
    mode: "0644"
  loop:
    - { path: "{{ nginx.directory }}/ssl/server.crt", content: '{{ bundle }}' }
    - { path: "{{ nginx.directory }}/ssl/server.key", content: '{{ ssl.key }}' }
  loop_control:
    label: '{{ item.path }}'
  notify: "Reload Nginx container"


- name: GeoLite2
  vars:
    location: "{{ nginx.directory }}/geoip2"
  include_role:
    name: epimorphics.deployment.goaccess
    tasks_from: "geolite2.yml"


- name: "Secure access"
  tags:
    - cfg
    - nginx
  htpasswd:
    path: "{{ nginx.directory }}/secure/htpasswd"
    name: "{{ nginx_secure[env].username }}"
    password: "{{ nginx_secure[env].password }}"
    owner: root
    group: root
    mode: 0644
  when:
  - nginx_secure is defined
  - nginx_secure[env] is defined


- name: "Nginx static content"
  tags:
    - cfg
    - nginx
  copy:
    src: "{{ item.src | default(omit) }}"
    content: "{{ item.content | default(omit) }}"
    dest: "{{ nginx.directory }}/{{ item.dest }}"
    owner: "root"
    group: "root"
    mode: "0644"
  loop_control:
    label: "{{ item.dest }}"
  loop:
    - { content: "{{ nginx_qos.robots_txt }}", dest: "html/robots.txt" }
    - { src: "qos-restriction.txt", dest: "error/429.html" }
    - { src: "50x.html", dest: "error/50x.html" }


- name: "Nginx config"
  tags:
    - cfg
    - nginx
  template:
    src: "nginx/{{ item }}.j2"
    dest: "{{ nginx.directory }}/{{ nginx_container.base_cfg_dir }}/{{ item }}"
    owner: "root"
    group: "root"
    mode: "0644"
  loop_control:
    label: "{{ item }}"
  loop: "{{ (nginx_configs + nginx_custom_configs) | sort }}"
  notify: "Reload Nginx container"


- name: "Nginx clear cache script"
  tags:
    - scripts
    - nginx
  template:
    src: "nginx/cache-clear.j2"
    dest: "{{ nginx.directory }}/bin/cache-clear"
    owner: "root"
    group: "root"
    mode: "0775"


- name: "Nginx container"
  tags:
    - container
    - nginx
  docker_container:
    name: "{{ nginx_container.name }}"
    image: "{{ nginx.image }}"
    log_driver: "{{ docker.logging.driver }}"
    log_options: "{{ docker.logging.options }}"
    network_mode: "{{ docker.network.mode }}"
    networks:
      - name: "{{ docker.network.name }}"
    restart_policy: "unless-stopped"
    networks_cli_compatible: yes
    env:
      NGINX_ENTRYPOINT_QUIET_LOGS: "1"
    ports:
      - "{{ nginx_container.port.http }}:{{ nginx.port.http }}"
      - "{{ nginx_container.port.https }}:{{ nginx.port.https }}"
    volumes:
      - "{{ nginx.directory }}/bin:/usr/local/bin:ro"
      - "{{ nginx.directory }}/cache:{{ nginx.cache.dir }}"
      - "{{ nginx.directory }}/{{ nginx_container.base_cfg_dir }}:{{ nginx.config }}/{{ nginx_container.base_cfg_dir }}:ro"
      - "{{ nginx.directory }}/geoip2:{{ nginx.config }}/geoip2:ro"
      - "{{ nginx.directory }}/html:{{ nginx.config }}/html:ro"
      - "{{ nginx.directory }}/error:{{ nginx.config }}/error:ro"
      - "{{ nginx.directory }}/secure:{{ nginx.config }}/secure:ro"
      - "{{ nginx.directory }}/ssl:{{ nginx.config }}/ssl:ro"
  register: nginx_docker


- name: "Telegraf"
  include_tasks: "telegraf.yml"


- name: "Services"
  include_tasks: "services.yml"
